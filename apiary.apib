FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# VMP

Service Oriented Architecture specified for the VMP project.

#######################
# Group Documents
#######################

## Documents Collection [/documents]

### List Documents DRAFT [GET /documents{?searchQuery,page,pageSize,sort,sortOrder}]
Returns the documents list.

+ Parameters
  + searchQuery: `{function:"vendor",docType: "actplan",owner: 234,insertDate: "2016-02-05",signingDate: "2016-02-05",validityDate: "2016-02-05"}`  (object, required) - json filter
  + page: 1 (optional, number) - The page of results to return
  + sort: description (optional) - Sorting order
  + pageSize: 25 (optional, number) - Amount of results to return

+ Response 200 (application/json)
  + Attributes (DocumentSearchResult)

### Document types DRAFT[GET /documents/types{?searchQuery}]
Return the document's types.

+ Parameters
  + searchQuery: `{function:"vendor"}` (SearchQueryFunctionFilter) - json filter

+ Response 200 (application/json)
  + Attributes (DocumentTypes)

### Document Owner DRAFT[GET /documents/owner]
Return the document's owner.

+ Response 200 (application/json)
  + Attributes (DocumentOwner)

#######################
# Group Entities
#######################

## Entity [/entity]

### Entity types DRAFT[GET /entityTypes/types{?searchQuery}]
Return the entity's types.

+ Parameters
  + searchQuery: `{function:"vendor"}` (SearchQueryFunctionFilter) - json filter

+ Response 200 (application/json)
  + Attributes (EntityTypes)

### Upload Document linking it to an entityType DRAFT [POST /entityTypes/{entityType}/documents]
Creates a new document linking it to an entityType.

+ Parameters
    + entityType: `VM_VND` (EntityType1, required) - id of the entity type

+ Request (multipart/form-data)

    + Attributes (DocumentUploadBodyET)

+ Response 201 (application/json)

    + Attributes (DocumentUploadedET)

+ Response 400
    Returned when input does not pass validation.
    + Body

+ Response 500
    Returned when a generic error occours.
    + Body

### Upload Document linking it to an entity DRAFT [POST /entityTypes/{entityType}/entity/{entityId}/documents]
Creates a new document linking it to an entity.

+ Parameters
    + entityType: `VM_VND` (EntityType1, required) - id of the entity type
    + entityId: 123 (number, required) - id of the entity

+ Request (multipart/form-data)

    + Attributes (DocumentUploadBodyE)

+ Response 201 (application/json)

    + Attributes (DocumentUploadedE)

+ Response 400
    Returned when input does not pass validation.
    + Body

+ Response 500
    Returned when a generic error occours.
    + Body

###Download Document linked to an entityType DRAFT [GET /entityTypes/{entityType}/documents/{id}]
Returns the document detail assigned to an entity type.

+ Parameters
    + entityType: `VM_VND` (EntityType1, required) - id of the entity type
    + id: 12 (number, required) - id of the document

+ Response 200 (application/XYZ)
    + Body

+ Response 404
    Returned when the required resource cannot be found.
    + Body

+ Response 500
    Returned when a generic error occours.
    + Body

###Download Document linked to an entity DRAFT [GET /entityTypes/{entityType}/entity/{entityId}/documents/{id}]
Returns the document detail assigned to an entity.

+ Parameters
    + entityType: `VM_VND` (EntityType1, required) - id of the entity type
    + entityId: 123 (number, required) - id of the entity
    + id: 12 (number, required) - id of the document

+ Response 200 (application/XYZ)
    + Body

+ Response 404
    Returned when the required resource cannot be found.
    + Body

+ Response 500
    Returned when a generic error occours.
    + Body

### Delete document linked to an entityType DRAFT[DELETE /entityTypes/{entityType}/documents/{id}]
Deletes a document assigned to an entity type.

+ Parameters
    + entityType: `VM_VND` (EntityType1, required) - id of the entity type
    + id: 12 (number, required) - id of the document

+ Response 204
    Returned when the resource is successfully deleted.

    + Body

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete document linked to an entity DRAFT[DELETE /entityTypes/{entityType}/entity/{entityId}/documents/{id}]
Deletes a document assigned to an entity.

+ Parameters
    + entityType: `VM_VND` (EntityType1, required) - id of the entity type
    + entityId: 123 (number, required) - id of the entity
    + id: 12 (number, required) - id of the document

+ Response 204
    Returned when the resource is successfully deleted.

    + Body

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
#######################
# Group Vendor Employees
#######################

## Employees [/employees]

### Create vendor employee DRAFT [POST]
Creates a new vendor employee.

+ Request (application/json)

    + Attributes (ProfileCreate)

+ Response 201 (application/json)

    + Attributes (ProfileDetail1)

+ Response 400
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body when a generic error occours.
    + Body
    
### Update vendor employee [PUT]

Updates a vendor employee.

+ Request (application/json)

    + Attributes (ProfileDetail1)

+ Response 200 (application/json)

    + Attributes (ProfileDetail1)

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Delete vendor employee [DELETE]

Deletes the specified vendor employee.

+ Request (application/json)

    + Attributes (ProfileDetail1)

+ Response 204

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

#######################
# Data Structures
#######################

## PaginationData1 (object)
+ paginationData (object, required) - Informations required for pagination
    + count: 3 (number,required) - total number of resources
    + pageNum: 1 (number, required) - slice of resources returned
    + pageSize: 25 (number, required) - size of the slice

## PaginationData4 (object)
+ paginationData (object, required) - Informations required for pagination
    + count: 4 (number,required) - total number of resources
    + pageNum: 1 (number, required) - slice of resources returned
    + pageSize: 25 (number, required) - size of the slice

## DocumentSearchResult (object)
+ results (array[Document1, Document2, Document3], required) - array of revisions
+ Include PaginationData1

## Document1 (object)
+ id: 1
+ name: `New_sup_R&D_L.pdf`
+ docType (DocumentType1, required)
+ entityId: 123 (number, optional)
+ description: `New supplier R&D legal`
+ owner: `Cesarini Micaela`
+ insertDate: `2016-02-06 10.50.30`
+ signingDate: `2016-02-06`
+ validityDate: `2016-02-06`

## Document2 (object)
+ id: 2
+ name: `Result_SVCS_TSC_NTT_20151103.xls`
+ docType (DocumentType2, required)
+ entityId: 123 (number, optional)
+ description: `performance NTT Data Austria`
+ owner: `Panseri Gianluigi`
+ insertDate: `2016-02-08 10.50.30`

## Document3 (object)
+ id: 3
+ name: `Supplier_questioinnaire_BRUTTI.pdf`
+ docType (DocumentType3, required)
+ description: `Supplier questioinnaire BRUTTI L`
+ owner: `Panseri Gianluigi`
+ insertDate: `2016-02-10 10.50.30`
+ signingDate: `2016-02-10`

## DocumentUploadBodyET (object)
+ docType: `GENDOC`
+ description: `Generic document for vendor`
+ insertDate: `2016-02-06 10.50.30`
+ signingDate: `2016-02-06`
+ validityDate: `2016-02-06`
+ file: `documento`

##DocumentUploadedET (object)
+ id: 12
+ docType: `GENDOC`
+ description: `Generic document for vendor`
+ insertDate: `2016-02-06 10.50.30`
+ signingDate: `2016-02-06`
+ validityDate: `2016-02-06`

## DocumentUploadBodyE (object)
+ entityId: 123 (number, optional) - the id of the entity to link the document
+ docType: `GENDOC`
+ description: `Generic document for vendor`
+ insertDate: `2016-02-06 10.50.30`
+ signingDate: `2016-02-06`
+ validityDate: `2016-02-06`
+ file: `documento`

##DocumentUploadedE (object)
+ id: 12
+ entityId: 123 (number, optional)
+ docType: `GENDOC`
+ description: `Generic document for vendor`
+ insertDate: `2016-02-06 10.50.30`
+ signingDate: `2016-02-06`
+ validityDate: `2016-02-06`

##DocumentType1 (object)
+ id: `DPL`
+ description: `DPL`
+ entityType (EntityVendor)

##DocumentType2 (object)
+ id: `IBMCHE`
+ description: `IBM Checklist`
+ entityType (EntityVendor)

##DocumentType3 (object)
+ id: `SUPQUE`
+ description: `Supplier questioinnaire`
+ entityType (EntityVendor)

##DocumentType4 (object)
+ id: `GENDOC`
+ description: `Generic document`
+ entityType (EntityVendor)

##DocumentTypes (object)
+ results (array[DocumentType1, DocumentType2, DocumentType3, DocumentType4], required) - array of document types
+ Include PaginationData4

##DocumentOwner (object)
+ results (array, required) - array of document's owner
    + Mario Rossi (string)
    + Giovanni Linzi (string)
    + Alberto Moresco (string)
    + Anna Baggio (string)
+ Include PaginationData4

##EntityType1 (string)
    + Members
        + `VM_VND`
        + `VM_VEMP`
        + `VM_CNTR`
        + `VM_CONT`

##EntityVendor (object)
+ id: `VM_VND`
+ description: `Vendor`

##EntityVendorEmployee (object)
+ id: `VM_VEMP`
+ description: `Vendor Employee`

##EntityContract (object)
+ id: `VM_CNTR`
+ description: `Contract ??Management??`

##EntityContact (object)
+ id: `VM_CONT`
+ description: `Contact`

##EntityTypes (object)
+ results (array[EntityVendor, EntityVendorEmployee, EntityContract, EntityContact], required) - array of entity types
+ Include PaginationData4

##SearchQueryFunctionFilter (enum, required)
    + Members
        + `{}`
        + `{function:"vendor"}`
        + `{function:"vempl"}`
        + `{function:"contract"}`
        + `{function:"contact"}`
        
## ProfileBase (object)
+ firstName: `MARIO` (required, string) - First name of the profile. Must be between 2 and 50 chars long.
+ lastName: `BIANCHI` (required, string) - Last name of the profile. Must be between 2 and 50 chars long.
+ email: `mbianchi@acme.it` (required, string) - Email of the profile. Must be a valid email, as specified in RFC2822.
+ profession: `Senior Developer` (string)
+ businessUnit: `not used?` (string)
+ jobResponsability: `job responsability` (string)
+ altInternetAddress: `firstname.lastname@organization2.com` (string) - Must be a valid email, as specified in RFC2822.
+ notesAddress: `indirizzo_notes@aaaaa.it` (string) - Must be a valid email, as specified in RFC2822.
+ userId: `userid` (required, string) - Username of the profile. This field must match with the field used to authenticate on the application server.
+ employeeType: `MAI` (required, string) - Code of profile type
+ personalCode: `X123456` (required, string)
+ bluePageCode: `L123456` (required, string)
+ hiringDate: `2016-02-28` (required, string) - Hiring date of the profile. The profile can be found through queries only starting from the specified date.
+ managerRole: `true` (boolean)
+ phone (object)
    + country: `39` (string)
    + number: `12345678` (string)
+ mobilePhone (object)
    + country: `39` (string)
    + number: `1234567` (string)
+ fax (object)
    + country: `39` (string)
    + number: `3904912345678` (string)
+ vendor (Vendor1) - Vendor object for vendor employees. Only its `id` is used.
+ functionalManager (object) - Profile of the functional manager. Only its `id` is used.
    + id: 1 (number)

## ProfileDetail (ProfileBase)
+ Include ProfilesAddresses
+ Include VendorEmployeeInfo

## ProfileCreate (ProfileDetail)
+ dismissDate: `2016-02-28` (required, string) - Dismiss date. Only considered when inserting the profile.

## ProfilesAddresses (object)
+ addresses
    + preferred (ProfileAddress) - preferred address of the user, if different from business address.
    + business (ProfileAddress) - business address of the user.

## ProfileAddress
+ street: Via Nizza 15
+ city: Torino
+ country: Italy
+ zip: 12345
+ locationId: 1 (number)


## ProfileAddressCountry
+ country: Italy
+ locationId: 1

## Vendor1 (object)
+ id: 1 (required, number)
+ name: `IBM Italia S.p.a.` (required, string)

## ProfileDetail1 (ProfileDetail)
+ empid: 1 (number) - id of the profile

## VendorEmployeeInfo (object)
+ subContractor1: `123` (number, optional) - ID of the first subcontractor.
+ subContractor2: `456` (number, optional) - ID of the second subcontractor.
+ vendorMid: `789` (number, optional)
+ dprid: `aaa` (string, optional)
+ fiscalcode: `AJHC34789PAH` (string, optional)
+ nationality: `Italian` (string, optional)
+ languageId: `italian` (string, optional) 
+ resourceTypeId: `bbb` (string, optional)
+ active: `Y` (string, optional)
+ dismiss: `N` (string, optional)
+ notes: `aaa bbb ccc` (string, optional)
+ networkAccessRequired: `N` (string, optional)
+ accountValidityDate: `2018-06-15ate` (string, optional)
+ badgeRequired: `N` (string, optional)
+ badgeValidityDate: `2016-02-28` (string, optional)
+ assetRequired: `Y` (string, optional)
+ telephonyRequired: `N` (string, optional)